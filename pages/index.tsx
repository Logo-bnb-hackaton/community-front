import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import React, {useEffect, useState} from "react";
import {useAccount, useContractRead, useContractWrite, usePrepareContractWrite} from "wagmi";
import Link from 'next/link'
import Header from "@/components/header/Header";
import {Button} from "antd";
import {ABI, CONTRACT_ADDRESS, WAIT_BLOCK_CONFIRMATIONS} from "@/constants";
import {BigNumber} from "ethers";
import {waitForTransaction} from "@wagmi/core";

export default function Home() {

    const {address, isConnected} = useAccount();
    const [priceToMint, setPriceToMint] = useState<BigNumber | undefined>(undefined);
    const [userProfileId, setUserProfileId] = useState<number | undefined>(undefined);

    // It's a workaround,
    // details - https://ethereum.stackexchange.com/questions/133612/error-hydration-failed-because-the-initial-ui-does-not-match-what-was-rendered
    const [isDefinitelyConnected, setIsDefinitelyConnected] = useState(false);
    useEffect(() => {
        if (isConnected) {
            setIsDefinitelyConnected(true);
        } else {
            setIsDefinitelyConnected(false);
        }
    }, [isConnected]);

    /**
     * Loading price to mint
     */
    const {data: priceToMintData, isSuccess: isPriceToMintDataSuccess} = useContractRead({
        address: CONTRACT_ADDRESS,
        abi: ABI,
        functionName: 'priceToMint',
        args: [address],
    });

    useEffect(() => {
        if (isPriceToMintDataSuccess) {
            setPriceToMint(priceToMintData as BigNumber);
        }
    }, [priceToMintData, isPriceToMintDataSuccess]);

    /**
     * Loading address tokens.
     *
     * I can't find a way to check if a user has a profile, so it's a workaround.
     *
     * success => has profile
     * error => no profile
     */
    const {
        data: tokenOfOwnerByIndexData,
        isSuccess: isTokenOfOwnerByIndexSuccess,
        refetch: tokenOfOwnerByIndexRefetch
    } = useContractRead({
        address: CONTRACT_ADDRESS,
        abi: ABI,
        functionName: 'tokenOfOwnerByIndex',
        args: [address, 0],
    });

    useEffect(() => {
        if (isTokenOfOwnerByIndexSuccess) {
            setUserProfileId(tokenOfOwnerByIndexData as number);
        } else {
            setUserProfileId(undefined);
        }
    }, [priceToMintData, isPriceToMintDataSuccess]);

    const {config: safeMintConfig} = usePrepareContractWrite({
        address: CONTRACT_ADDRESS,
        abi: ABI,
        functionName: 'safeMint',
        overrides: {
            value: priceToMint
        }
    });

    const [isMinting, setIsMinting] = useState(false);
    const {writeAsync: safeMintWriteAsync} = useContractWrite(safeMintConfig)

    const mint = async () => {
        if (!priceToMint) {
            console.error("Can't load mint price.");
            return;
        }
        setIsMinting(true);
        safeMintWriteAsync?.().then(data => {
            return waitForTransaction({
                hash: data.hash,
                confirmations: WAIT_BLOCK_CONFIRMATIONS
            })
                .then(data => {
                    console.log(data);
                })
                .finally(() => {
                    setIsMinting(false);
                    // after minting we have to receive token by user again.
                    tokenOfOwnerByIndexRefetch();
                });
        });
    }

    return (
        <>
            <Head>
                {/* TODO fix it*/}
                <title>Community</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <main className={styles.main}>
                <Header
                    isProfileLoading={false}
                    profileOwner={undefined}
                    saveCallback={undefined}
                    edited={false}
                    setEdited={undefined}
                    disabled={false}
                />

                <div className={styles.center}>
                    {
                        isDefinitelyConnected ?
                            (
                                userProfileId ?
                                    <Link href={`/profile/${userProfileId}`}>To profile</Link> :
                                    <Button loading={isMinting} onClick={mint}>Mint</Button>
                            )
                            :
                            <h2>Please connect wallet</h2>
                    }
                </div>
            </main>
        </>
    )
}
